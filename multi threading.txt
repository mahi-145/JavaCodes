Q:1 Thread API's?
Ans:
static Thread currentThread()
This method returns a reference to the currently executing thread object.

static int activeCount()
This method returns the number of active threads in the current thread's thread group.

long getId()
This method returns the identifier of this Thread.


String getName()
This method returns this thread's name.

int getPriority()
This method Returns this thread's priority.

Thread.State getState()
This method returns the state of this thread.

void join()
Waits for this thread to die.

void run()
If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns

static void setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)
This method set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread.


void setName(String name)
This method changes the name of this thread to be equal to the argument name.

void setPriority(int newPriority)
This method changes the priority of this thread.

void start()
This method causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread.

void checkAccess()
This method determines if the currently running thread has permission to modify this thread.



 

Q:2 ways of creating threads ??
Ans: There are two ways to create a thread:
   1 By extending Thread class
   2 By implementing Runnable interface.

  1:Java Thread Example by extending Thread class 
  Thread class:
    Thread class provide constructors and methods to create and perform operations on a thread.
    Thread class extends Object class and implements Runnable interface.
  
  Ex->
   class Multi extends Thread{  
   public void run(){  
   System.out.println("thread is running...");  
   }   
   public static void main(String args[]){  
   Multi t1=new Multi();  
   t1.start();  
  }  
 }  
 Output:thread is running...
 
 
  2:Java Thread Example by implementing Runnable interface
 
  Runnable interface:
  The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread. 
  Runnable interface have only one method named run().
  
  Ex->
  
  class Multi3 implements Runnable{  
  public void run(){  
  System.out.println("thread is running...");  
 }  
  public static void main(String args[]){  
  Multi3 m1=new Multi3();  
  Thread t1 =new Thread(m1);  
  t1.start();  
 }  
}  
Output:thread is running...


If you are not extending the Thread class,your class object would not be treated as a thread object.
So you need to explicitely create Thread class object.We are passing the object of your class that implements Runnable so that your class run() method may execute.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Q:3 Thread LifeCycle and Thread Priority ?
Ans:
A thread can be in one of the five states. There is only 4 states in thread life cycle in java new, runnable, non-runnable and terminated. There is no running state.
But for better understanding the threads, we are explaining it in the 5 states.

The life cycle of the thread in java is controlled by JVM. The java thread states are as follows:
1:New
2:Runnable
3:Running
4:Non-Runnable (Blocked)
5:Terminated

1) New
The thread is in new state if you create an instance of Thread class but before the invocation of start() method.

2) Runnable
The thread is in runnable state after invocation of start() method, but the thread scheduler has not selected it to be the running thread.

3) Running
The thread is in running state if the thread scheduler has selected it.

4) Non-Runnable (Blocked)
This is the state when the thread is still alive, but is currently not eligible to run.

5) Terminated
A thread is in terminated or dead state when its run() method exits.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Priority of a Thread (Thread Priority):
Each thread have a priority. Priorities are represented by a number between 1 and 10. In most cases, thread schedular schedules the threads according to their priority (known as preemptive scheduling). But it is not guaranteed because it depends on JVM specification that which scheduling it chooses.
3 constants defined in Thread class:
public static int MIN_PRIORITY
public static int NORM_PRIORITY
public static int MAX_PRIORITY
Default priority of a thread is 5 (NORM_PRIORITY). The value of MIN_PRIORITY is 1 and the value of MAX_PRIORITY is 10.

Example of priority of a Thread:

class TestMultiPriority1 extends Thread{  
   public void run(){  
   System.out.println("running thread name is:"+Thread.currentThread().getName());  
   System.out.println("running thread priority is:"+Thread.currentThread().getPriority());  
  
  }  
  public static void main(String args[]){  
  TestMultiPriority1 m1=new TestMultiPriority1();  
  TestMultiPriority1 m2=new TestMultiPriority1();  
  m1.setPriority(Thread.MIN_PRIORITY);  
  m2.setPriority(Thread.MAX_PRIORITY);  
  m1.start();  
  m2.start();  
   
 }  
}     

Output:running thread name is:Thread-0
       running thread priority is:10
       running thread name is:Thread-1
       running thread priority is:1
       
	   
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Q4:Which exception is thrown by the Sleep()?
The sleep() method of Thread class is used to sleep a thread for the specified amount of time.
It Throws InterruptedException.

The Thread class provides two methods for sleeping a thread:


Example of sleep method in java

class TestSleepMethod1 extends Thread{  
 public void run(){  
  for(int i=1;i<5;i++){  
    try{Thread.sleep(500);}catch(InterruptedException e){System.out.println(e);}  
    System.out.println(i);  
  }  
 }  
 public static void main(String args[]){  
  TestSleepMethod1 t1=new TestSleepMethod1();  
  TestSleepMethod1 t2=new TestSleepMethod1();  
   
  t1.start();  
  t2.start();  
 }  
}  
Output:

       1
       1
       2
       2
       3
       3
       4
       4	   
	   
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 Q5: Wait(),Notify(),NotifyAll()?
 Ans: Cooperation (Inter-thread communication) is a mechanism in which a thread is paused running in its critical section and another thread is allowed to enter (or lock) in the same critical section to be executed.It is implemented by following methods of Object class:

   1:wait()
   2:notify()
   3:notifyAll()
   
 1) wait() method
Causes current thread to release the lock and wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed.

The current thread must own this object's monitor, so it must be called from the synchronized method only otherwise it will throw exception.

2) notify() method
Wakes up a single thread that is waiting on this object's monitor. If any threads are waiting on this object, one of them is chosen to be awakened. The choice is arbitrary and occurs at the discretion of the implementation. Syntax:

public final void notify()

3) notifyAll() method
Wakes up all threads that are waiting on this object's monitor.
Syntax:
public final void notifyAll()  
   
Example ->


class Customer{  
int amount=10000;  
  
synchronized void withdraw(int amount){  
System.out.println("going to withdraw...");  
  
if(this.amount<amount){  
System.out.println("Less balance; waiting for deposit...");  
try{wait();}catch(Exception e){}  
}  
this.amount-=amount;  
System.out.println("withdraw completed...");  
}  
  
synchronized void deposit(int amount){  
System.out.println("going to deposit...");  
this.amount+=amount;  
System.out.println("deposit completed... ");  
notify();  
}  
}  
  
class Test{  
public static void main(String args[]){  
final Customer c=new Customer();  
new Thread(){  
public void run(){c.withdraw(15000);}  
}.start();  
new Thread(){  
public void run(){c.deposit(10000);}  
}.start();  
  
}}  
Output: going to withdraw...
       Less balance; waiting for deposit...
       going to deposit...
       deposit completed...
       withdraw completed
  
 